package com.ctv.geoservice.web;

import com.ctv.geoservice.geolocalize.GeolocalizationService;
import com.ctv.geoservice.geolocalize.GeoserviceException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Controller for on-demand operations
 */
@Controller
@RequestMapping("/ondemand")
public class OnDemandOperatorController extends GeoServiceAbstractController {

    private static final Logger log = LoggerFactory.getLogger(OnDemandOperatorController.class);

    @Autowired
    GeolocalizationService geolocalizationService;

    /**
     * Método para re-generar las reglas de geolocalización de todos los deliveries a sus respectivas CDNs.
     * @return
     * @throws Exception 
     */
    @RequestMapping("/rebuildGeolocalizationRules")
    @ResponseBody // no retornamos template, solo json autoexplicativo
    private String regenerateDeals() throws Exception {
        geolocalizationService.refreshGeolocalizationRules();
        return "Everything went OK";
    }

    /**
     * Retorna la lista de reglas de geolocalización de todos los deliveries.
     * @return la lista de reglas de geolocalización de todos los deliveries.
     * @throws Exception 
     */
    @RequestMapping(value = "/getGeolocalizationRules", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    private Object getGeolocalizationRules() throws Exception {
        return geolocalizationService.getGeolocalizationRules();
    }

    /**
     * Retirba la lista de reglas de geolocalización del delivery especificado por parámetro de path (PATH PARAM).
     * @param delivery
     * @return
     * @throws Exception 
     */
    @RequestMapping(value = "/getGeolocalizationRulesForDelivery/{delivery}", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    private Object getGeolocalizationRulesForDelivery(@PathVariable("delivery") String delivery) throws Exception {
        return geolocalizationService.getGeolocalizationRulesForDelivery(delivery);
    }

    /**
     * Retorna la regla de geolocalización que aplica al <code>delivery</code> y <code>resourcePath</code> indicados por <em>query string</em>.
     * @param delivery
     * @param resourcePath
     * @return la regla de geolocalización que aplica al <code>delivery</code> y <code>resourcePath</code> indicados por <em>query string</em>.
     * @throws Exception 
     */
    @RequestMapping(value = "/getSingleGeolocalizationRule", produces = MediaType.TEXT_PLAIN_VALUE)
    @ResponseBody
    private String getSingleGeolocalizationRule(@RequestParam("delivery") String delivery, @RequestParam("resource") String resourcePath) throws Exception {
        return geolocalizationService.getSingleGeolocalizationRule(delivery, resourcePath);
    }
}
